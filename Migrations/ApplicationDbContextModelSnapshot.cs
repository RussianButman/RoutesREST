// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoutesREST.Models;

#nullable disable

namespace RoutesREST.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BypassRoutes");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRouteDateTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("BypassDateTimes");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRouteLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BypassRouteId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BypassRouteId")
                        .IsUnique();

                    b.ToTable("BypassRouteLocations");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BypassRouteIndex")
                        .HasColumnType("integer");

                    b.Property<string>("NfcTagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("BypassRoutePoints");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePointDateTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RoutePointId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoutePointId");

                    b.ToTable("BypassRoutePointDateTime");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePointLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BypassRoutePointId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BypassRoutePointId")
                        .IsUnique();

                    b.ToTable("BypassRoutePointLocations");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.Performer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRouteDateTime", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoute", "BypassRoute")
                        .WithMany("BypassDatetimes")
                        .HasForeignKey("RouteId");

                    b.Navigation("BypassRoute");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRouteLocation", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoute", "BypassRoute")
                        .WithOne("Location")
                        .HasForeignKey("RoutesREST.Models.Entities.BypassRouteLocation", "BypassRouteId");

                    b.Navigation("BypassRoute");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePoint", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoute", "BypassRoute")
                        .WithMany("BypassRoutePoints")
                        .HasForeignKey("RouteId");

                    b.Navigation("BypassRoute");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePointDateTime", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoutePoint", "BypassRoutePoint")
                        .WithMany("BypassDatetimes")
                        .HasForeignKey("RoutePointId");

                    b.Navigation("BypassRoutePoint");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePointLocation", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoutePoint", "BypassRoutePoint")
                        .WithOne("Location")
                        .HasForeignKey("RoutesREST.Models.Entities.BypassRoutePointLocation", "BypassRoutePointId");

                    b.Navigation("BypassRoutePoint");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.Performer", b =>
                {
                    b.HasOne("RoutesREST.Models.Entities.BypassRoute", "BypassRoute")
                        .WithOne("Performer")
                        .HasForeignKey("RoutesREST.Models.Entities.Performer", "RouteId");

                    b.Navigation("BypassRoute");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoute", b =>
                {
                    b.Navigation("BypassDatetimes");

                    b.Navigation("BypassRoutePoints");

                    b.Navigation("Location");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("RoutesREST.Models.Entities.BypassRoutePoint", b =>
                {
                    b.Navigation("BypassDatetimes");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
